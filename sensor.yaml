###############################################################################
# SENSORS
###############################################################################

# latest commit message
- platform: command_line
  command: git log -1 --format=%s
  name: last_commit

###############################################################################
# INTEGRAL AND DERIVATIVE
###############################################################################

# Derivative for current gas usage
- platform: derivative
  source: sensor.gas_consumed
  name: 'Gas usage'
  round: 3
  unit_time: h
  unit: 'mÂ³/h'
  time_window: "00:10:00"

###############################################################################
# HOLIDAY REPLAY
###############################################################################

# Replay sensor for holiday mode
- platform: history_stats
  name: "replay_living_room"
  entity_id: light.living_room
  state: "on"
  type: count
  start: >
    {{ as_timestamp(now()) - (7*86400) }}
  duration: 00:00:30

- platform: history_stats
  name: "replay_bedroom"
  entity_id: light.bedroom
  state: "on"
  type: count
  start: >
    {{ as_timestamp(now()) - (7*86400) }}
  duration: 00:00:30

- platform: history_stats
  name: "replay_dining_room"
  entity_id: light.dining_room
  state: "on"
  type: count
  start: >
    {{ as_timestamp(now()) - (7*86400) }}
  duration: 00:00:30

- platform: history_stats
  name: "replay_closet"
  entity_id: light.closet
  state: "on"
  type: count
  start: >
    {{ as_timestamp(now()) - (7*86400) }}
  duration: 00:00:30

- platform: history_stats
  name: "replay_kitchen"
  entity_id: light.kitchen
  state: "on"
  type: count
  start: >
    {{ as_timestamp(now()) - (7*86400) }}
  duration: 00:00:30

###############################################################################
# AVARAGE OF TEMPERATURE
###############################################################################

# Downstairs average
- platform: min_max
  type: mean
  name: "downstairs temperature"
  round_digits: 1
  entity_ids:
    - sensor.downstairs_hallway_motion_temperature
    - sensor.livingroom_motion_temperature
    - sensor.stairs_closet_motion_temperature
    - sensor.air_sensor_temperature
    - sensor.devils_vine_temperature
    - sensor.zamioculcas_temperature
    - sensor.fern_temperature

###############################################################################
# SYSTEM MONITOR
###############################################################################

# System monitor
- platform: systemmonitor
  resources:
    - type: processor_use
    - type: memory_use_percent
    - type: processor_temperature
    - type: last_boot
    - type: disk_use_percent
      arg: "/"
    - type: disk_free
      arg: "/"
    - type: network_in
      arg: eth0
    - type: throughput_network_in
      arg: eth0
    - type: network_out
      arg: eth0
    - type: throughput_network_out
      arg: eth0

###############################################################################
# TEMPLATE SENSORS
###############################################################################

- platform: template
  sensors:

    # Alarm panel battery sensor
    alarm_panel_battery:
      friendly_name: "Alarm paneel"
      unit_of_measurement: "%"
      device_class: battery
      value_template: >-
        {% set battery_level = state_attr('sensor.alarm_panel_power', 'battery_voltage') %}
        {% if is_number(battery_level) %}
          {{ ((battery_level - 3.6)/2.4 * 100) | int('unknown') }}
        {% else %}
          {{ 'unknown' }}
        {% endif %}
      icon_template: >-
        {% set battery_level = states('sensor.alarm_panel_battery') %}
        {% if not is_number(battery_level) %}
          mdi:battery-unknown
        {% else %}
          {% set battery_round = (battery_level|int / 10)|int * 10 %}
          {% if battery_round >= 100 %}
            mdi:battery
          {% elif battery_round > 0 %}
            mdi:battery-{{ battery_round }}
          {% else %}
            mdi:battery-alert
          {% endif %}
        {% endif %}

    # Quiet time schedule
    quiet_time_schedule:
      friendly_name: "Quiet time schedule"
      icon_template: mdi:volume-off
      value_template: >-
        {% set night_start_free = state_attr('input_datetime.start_night_free_day', 'hour') * 60 + state_attr('input_datetime.start_night_free_day', 'minute')%}
        {% set night_start_work = state_attr('input_datetime.start_night_workday', 'hour') * 60 + state_attr('input_datetime.start_night_workday', 'minute')%}
        {% set night_end_free = state_attr('input_datetime.end_night_free_day', 'hour') * 60 + state_attr('input_datetime.end_night_free_day', 'minute')%}
        {% set night_end_work = state_attr('input_datetime.end_night_workday', 'hour') * 60 + state_attr('input_datetime.end_night_workday', 'minute')%}
        {% set offset = state_attr('input_datetime.quiet_offset', 'hour') * 60 + state_attr('input_datetime.quiet_offset', 'minute')%}
        {% set now = (states('sensor.time')[:2] | int)*60 + (states('sensor.time')[-2:] | int)%}

        {% if is_state('binary_sensor.workday_sensor', 'off') %}
          {% if (night_end_free + offset) < now < (night_start_free - offset) %}
            false
          {%else%}
            true
          {%endif%}
        {%else%}
          {% if (night_end_work + offset) < now < (night_start_work - offset) %}
            false
          {%else%}
            true
          {%endif%}
        {%endif%}

    # outdoor light schedule
    outdoor_lights:
      friendly_name: "Outdoor lights"
      value_template: >-
        {% set mod_now = now().hour * 60 + now().minute %}
        {%set dawn = as_local(as_datetime(state_attr('sun.sun', 'next_dawn')))%}
        {%set dusk = as_local(as_datetime(state_attr('sun.sun', 'next_dusk')))%}

        {% set hour = state_attr('input_datetime.outdoor_lights_offset', 'hour')%}
        {% set minute = state_attr('input_datetime.outdoor_lights_offset', 'minute')%}
        {%set offset_dawn = dawn + timedelta( hours = hour, minutes = minute )%}
        {%set offset_dusk = dusk - timedelta( hours = hour, minutes = minute )%}
        {%set mod_dawn = offset_dawn.hour * 60 + offset_dawn.minute %}
        {%set mod_dusk = offset_dusk.hour * 60 + offset_dusk.minute %}

        {% if ((is_state('sensor.house_state', 'home') or states('proximity.home_mike')|int(10) < 2 or states('proximity.home_anneloes')|int(10) < 2)) and not is_state('sensor.house_state', 'night') %}
          {% if mod_now < mod_dawn %}
            on
          {% elif mod_now > mod_dusk %}
            on
          {%else%}
            off
          {%endif%}
        {%else%}
          off
        {%endif%}

    somebody_home:
      friendly_name: "Somebody home"
      value_template: >-
          {% set mike_home = is_state('person.tmp', 'home') %}
          {% set anneloes_home = is_state('person.anneloes_jagt', 'home') %}
          {% if mike_home or anneloes_home %}
              true
          {% else %}
              false
          {% endif %}

    house_state:
      friendly_name: "House state"
      value_template: >-
          {% set time = states('sensor.time') %}
          {% if is_state('input_select.house_state_override', 'auto') %}
            {% if is_state('input_boolean.holiday', 'on') %}
              holiday
            {% else %}
              {% if is_state('sensor.somebody_home', 'false') %}
                away
              {% else %}
                {% if is_state('binary_sensor.workday_sensor', 'off') %}
                  {% if states('input_datetime.start_night_free_day') > time > states('input_datetime.end_night_free_day')  %}
                    home
                  {% else %}
                    night
                  {% endif %}
                {% else %}
                  {% if states('input_datetime.start_night_workday') > time > states('input_datetime.end_night_workday')  %}
                    home
                  {% else %}
                    night
                  {% endif %}
                {% endif %}
              {% endif %}
            {% endif %}
          {% else %}
            {{ states('input_select.house_state_override') }}
          {% endif %}
      icon_template: >-
          {% if is_state('sensor.house_state', 'holiday') %}
            mdi:beach
          {% elif is_state('sensor.house_state', 'home') %}
            mdi:home
          {% elif is_state('sensor.house_state', 'away') %}
            mdi:home-export-outline
          {% elif is_state('sensor.house_state', 'night') %}
            mdi:weather-night
          {% endif %}

    climate_period:
      friendly_name: "Climate period"
      value_template: >-
        {%set old = as_timestamp(strptime(states('sensor.time_utc'), '%H:%M'))%}
        {%set new = as_timestamp(strptime(states('sensor.time'), '%H:%M'))%}
        {% set dif = new - old %}
        {% set tnow = as_timestamp(strptime(states('sensor.time'), '%H:%M')+timedelta(seconds=2208985200))+dif %}

        {% set early_start = state_attr('input_datetime.heating_pre_heat', 'timestamp') %}
        {% set night_end_work = state_attr('input_datetime.end_night_workday', 'timestamp') %}
        {% set work_night_end_time = (night_end_work - early_start)  | timestamp_utc %}
        {% set night_end_free = state_attr('input_datetime.end_night_free_day', 'timestamp') %}
        {% set free_night_end_time = (night_end_free - early_start)  | timestamp_utc %}

        {% set early_stop = state_attr('input_datetime.heating_early_stop', 'timestamp') %}
        {% set night_start_work = state_attr('input_datetime.start_night_workday', 'timestamp') %}
        {% set work_night_start_time = (night_start_work - early_stop)  | timestamp_utc %}
        {% set night_start_free = state_attr('input_datetime.start_night_free_day', 'timestamp') %}
        {% set free_night_start_time = (night_start_free - early_stop)  | timestamp_utc %}

        {% if is_state('input_select.climate_period_override', 'auto') %}
          {% if is_state('binary_sensor.workday_sensor', 'off') %}
            {% if as_timestamp(free_night_end_time) < tnow < as_timestamp(state_attr('input_datetime.morning_end', 'timestamp')| timestamp_utc) %}
              morning
            {% elif as_timestamp(state_attr('input_datetime.morning_end', 'timestamp')| timestamp_utc) < tnow < as_timestamp(state_attr('input_datetime.evening_start', 'timestamp')| timestamp_utc) %}
              day
            {% elif as_timestamp(state_attr('input_datetime.evening_start', 'timestamp')| timestamp_utc) < tnow < as_timestamp(free_night_start_time)  %}
              evening
            {% else %}
              night
            {% endif %}
          {% else %}
            {% if as_timestamp(work_night_end_time)  < tnow < as_timestamp( state_attr('input_datetime.morning_end', 'timestamp')| timestamp_utc) %}
              morning
            {% elif as_timestamp(state_attr('input_datetime.morning_end', 'timestamp')| timestamp_utc) < tnow < as_timestamp(state_attr('input_datetime.evening_start', 'timestamp')| timestamp_utc )%}
              day
            {% elif as_timestamp(state_attr('input_datetime.evening_start', 'timestamp')| timestamp_utc) < tnow < as_timestamp(work_night_start_time)  %}
              evening
            {% else %}
              night
            {% endif %}
          {% endif %}
        {% else %}
          {{states('input_select.climate_period_override')}}
        {% endif  %}
      icon_template: >-
          {% if is_state('sensor.climate_period', 'morning') %}
            mdi:weather-sunset-up
          {% elif is_state('sensor.climate_period', 'day') %}
            mdi:weather-sunny
          {% elif is_state('sensor.climate_period', 'evening') %}
            mdi:weather-sunset-down
          {% elif is_state('sensor.climate_period', 'night') %}
            mdi:minus
          {% endif %}

    # Thermostat setpoint for time of the day.
    climate_setpoint:
      friendly_name: "Climate setpoint"
      unit_of_measurement: "Â°C"
      device_class: temperature
      value_template: >-
       {% if is_state('sensor.climate_period', 'morning') %}
         {{ states('input_number.morning_temperature') }}
       {% elif is_state('sensor.climate_period', 'day') %}
         {{ states('input_number.day_temperature') }}
       {% elif is_state('sensor.climate_period', 'evening') %}
         {{ states('input_number.evening_temperature') }}
       {% else %}
         {{ states('input_number.night_temperature') }}
       {% endif %}

    # A template to determine if the growlight should be on.
    # It will turn on the grow light if nobody is home and the sun is up.
    grow_light_scheduler:
      friendly_name: "Grow light scheduler"
      value_template: >-
        {% set house = states('sensor.house_state') %}
        {% set sun = states('sun.sun') %}
        {%if ((house == 'away') or (house == 'holiday')) and (sun == 'above_horizon')%}
          true
        {%else%}
          false
        {%endif%}

    # Icon for air quality to be used in dashboards
    humidifier:
      friendly_name: "Luchtbevochtiger"
      value_template: >-
        {% if states('switch.humidifier') == 'off' %}
          uit
        {% elif states('sensor.humidifier_power')|int > 0 %}
          aan
        {% else %}
          standby
        {%endif%}
      icon_template: >-
        {% if states('switch.humidifier') == 'off' %}
          mdi:air-humidifier-off
        {% elif states('sensor.humidifier_power')|int > 0 %}
          mdi:air-humidifier
        {% else %}
          mdi:air-humidifier
        {%endif%}

    # Low batteries to be used in the UI
    low_batteries:
      friendly_name: "Lege batterijen"
      value_template: >-
        {%- set threshold = 15 -%}
        {% set data = namespace(thing=[]) %}
        {%- set domains = ['light', 'switch', 'sensor', 'binary_sensor', 'cover'] -%}
        {%- for domain in domains -%}
          {%- for item in states[domain] if ((item.attributes.battery_level is defined and item.attributes['battery_level'] | int(100) < threshold) or ("battery" in item.name | lower and ((item.state | int(100) < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown"))) -%}
            {% set data.thing = data.thing + [item.attributes.friendly_name] %}
          {%- endfor -%}
        {%- endfor -%}
        {{data.thing|count}}

    # Disconnected devices to be used in the UI
    disconnected:
      friendly_name: "Niet verbonden"
      value_template: >-
        {% set data = namespace(thing=[]) %}
        {%- for item in states.binary_sensor  -%}
          {% if "connectivity" in item | string %}
            {% if item.state == 'off' %}
              {% set data.thing = data.thing + [item.attributes.friendly_name] %}
            {% endif %}
          {% endif %}
        {% endfor %}
        {{data.thing|count}}

    # Open windows
    open_windows:
      friendly_name: "Open ramen"
      value_template: >-
        {% set data = namespace(thing=[]) %}
        {%- for item in states.binary_sensor  -%}
          {% if "device_class=window" in item | string %}
            {% if item.state == 'on' %}
              {% set data.thing = data.thing + [item.attributes.friendly_name] %}
            {% endif %}
          {% endif %}
        {% endfor %}
        {{data.thing|count}}

    # Open doors
    open_doors:
      friendly_name: "Open deuren"
      value_template: >-
        {% set data = namespace(thing=[]) %}
        {%- for item in states.binary_sensor  -%}
          {% if "device_class=door" in item | string %}
            {% if item.state == 'on' %}
              {% set data.thing = data.thing + [item.attributes.friendly_name] %}
            {% endif %}
          {% endif %}
        {% endfor %}
        {{data.thing|count}}

    problem_plants:
      friendly_name: "Planten met een probleem"
      value_template: >-
        {% set data = namespace(thing=[]) %}
        {%- for item in states.plant  -%}
          {% if "problem=none" not in item | string %}
            {% set data.thing = data.thing + [item.attributes.friendly_name] %}
          {% endif %}
        {% endfor %}
        {{ data.thing|count }}

    missing_entities_services:
      friendly_name: "Missende entiteiten of services"
      value_template: >-
        {{ states("sensor.watchman_missing_entities")|int + states("sensor.watchman_missing_services")|int }}

###############################################################################
# STATISTICS
###############################################################################

# Average used for sprinkler water level
- platform: statistics
  entity_id: sensor.buienradar_humidity
  name: "Average humidity"
  state_characteristic: mean
  sampling_size: 200
  max_age:
    hours: 24

# Average used for sprinkler water level
- platform: statistics
  entity_id: sensor.buienradar_ground_temperature
  name: "Average ground temperature"
  state_characteristic: mean
  sampling_size: 200
  max_age:
    hours: 24

###############################################################################
# TIME
###############################################################################

# Date and time sensors
- platform: time_date
  display_options:
    - 'time'
    - 'date'
    - 'date_time'
    - 'date_time_utc'
    - 'date_time_iso'
    - 'time_date'
    - 'time_utc'
