flash_licht:
  alias: Alarm - Flash light red
  sequence:
  - service: scene.create
    data:
      scene_id: lights_before_alarm
      snapshot_entities:
      - light.living_room
      - light.dining_room
      - light.kitchen
      - light.stairs_closet
      - light.downstairs_hallway
      - light.upstairs_hallway
      - light.attic_hallway
      - light.attic
      - light.bedroom
      - light.closet
      - light.car_port
      - light.toilet
  - service: light.turn_on
    data:
      brightness_pct: 100
      color_name: red
    target:
      area_id:
      - attic
      - attic_hallway
      - bedroom
      - car_port
      - closet
      - dining_room
      - downstairs_hallway
      - kitchen
      - living_room
      - stairs_closet
      - toilet
      - upstairs_hallway
  - repeat:
      while:
      - condition: state
        entity_id: alarm_control_panel.home_alarm
        state: triggered
      sequence:
      - service: light.toggle
        data:
          color_name: red
          brightness_pct: 100
        target:
          area_id:
          - downstairs_hallway
          - upstairs_hallway
          - attic_hallway
          - stairs_closet
          - kitchen
          - dining_room
      - delay:
          hours: 0
          minutes: 0
          seconds: 0
          milliseconds: 800
  - service: scene.reload
    data: {}
  - service: scene.turn_on
    target:
      entity_id: scene.lights_before_alarm
    data: {}
  mode: restart
  icon: mdi:alarm-light-outline
lights_turn_off_all_lights:
  alias: Lights - Turn off all lights
  sequence:
  - service: light.turn_off
    target:
      area_id:
      - attic
      - attic_hallway
      - bedroom
      - car_port
      - closet
      - decorations
      - dining_room
      - downstairs_hallway
      - garden
      - kitchen
      - living_room
      - stairs_closet
      - toilet
      - upstairs_hallway
      - front_garden
  mode: single
  icon: mdi:lightbulb-group-off
alarm_sound_alarm:
  alias: Alarm - Sound alarm
  sequence:
  - service: media_player.volume_set
    data:
      volume_level: '{{states(''input_number.alarm_volume'') | float}}'
    target:
      entity_id: media_player.whole_home
  - service: media_player.play_media
    data:
      media_content_id: media-source://media_source/local/system/alarm_sound_long.mp3
      media_content_type: audio/mp3
    target:
      entity_id:
      - media_player.whole_home
  - repeat:
      until:
      - condition: not
        conditions:
        - condition: state
          entity_id: alarm_control_panel.home_alarm
          state: triggered
      sequence:
      - delay:
          hours: 0
          minutes: 0
          seconds: 0
          milliseconds: 100
  - service: media_player.turn_off
    data: {}
    target:
      entity_id: media_player.whole_home
  - service: scene.turn_on
    target:
      entity_id: scene.before_alarm_sound
    data: {}
  mode: single
  icon: mdi:volume-medium
alarm_sound_pending:
  alias: Alarm - Sound pending
  sequence:
  - service: media_player.volume_set
    data:
      volume_level: '{{states(''input_number.aux_volume'') | float}}'
    target:
      entity_id: media_player.whole_home
  - service: media_player.play_media
    data:
      media_content_id: media-source://media_source/local/system/pending_sound_long.mp3
      media_content_type: audio/mp3
    target:
      entity_id: media_player.whole_home
  - repeat:
      until:
      - condition: not
        conditions:
        - condition: state
          entity_id: alarm_control_panel.home_alarm
          state: pending
      sequence:
      - delay:
          hours: 0
          minutes: 0
          seconds: 0
          milliseconds: 100
  - condition: or
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home_alarm
      state: armed_night
    - condition: state
      entity_id: alarm_control_panel.home_alarm
      state: disarmed
    - condition: state
      entity_id: alarm_control_panel.home_alarm
      state: armed_away
  - service: media_player.turn_off
    data: {}
    target:
      entity_id: media_player.whole_home
  - service: scene.turn_on
    target:
      entity_id: scene.before_alarm_sound
    data: {}
  mode: single
  icon: mdi:volume-medium
alarm_sound_arming:
  alias: Alarm - Sound arming
  sequence:
  - service: media_player.volume_set
    data:
      volume_level: '{{states(''input_number.aux_volume'') | float}}'
    target:
      entity_id: media_player.whole_home
  - service: media_player.play_media
    data:
      media_content_id: media-source://media_source/local/system/pending_sound_long.mp3
      media_content_type: audio/mp3
    target:
      entity_id: media_player.whole_home
  - repeat:
      until:
      - condition: not
        conditions:
        - condition: state
          entity_id: alarm_control_panel.home_alarm
          state: arming
      sequence:
      - delay:
          hours: 0
          minutes: 0
          seconds: 0
          milliseconds: 100
  - condition: or
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home_alarm
      state: armed_away
    - condition: state
      entity_id: alarm_control_panel.home_alarm
      state: disarmed
    - condition: state
      entity_id: alarm_control_panel.home_alarm
      state: armed_night
  - service: media_player.turn_off
    data: {}
    target:
      entity_id: media_player.whole_home
  - service: scene.turn_on
    target:
      entity_id: scene.before_alarm_sound
    data: {}
  mode: single
  icon: mdi:volume-medium
sprinkler_stop:
  alias: Sprinkler - Stop
  sequence:
  - service: opensprinkler.stop
    data:
      entity_id: binary_sensor.sprinkler_1_station_running
  - service: opensprinkler.stop
    data:
      entity_id: binary_sensor.sprinkler_2_station_running
  - service: opensprinkler.stop
    data:
      entity_id: binary_sensor.sprinkler_3_station_running
  mode: single
  icon: mdi:sprinkler-variant
'1630344371413':
  alias: Sprinklers - Run back for input time
  sequence:
  - service: opensprinkler.run
    data:
      entity_id: binary_sensor.sprinkler_1_station_running
      run_seconds: '{{states("input_number.back_sprinkler_time") | int * 60}}'
  mode: single
  icon: mdi:sprinkler-variant
spriklers_run_front_for_input_time:
  alias: Sprinklers - Run front for input time
  sequence:
  - service: opensprinkler.run
    data:
      entity_id: binary_sensor.sprinkler_2_station_running
      run_seconds: '{{states("input_number.front_sprinkler_time") | int * 60}}'
  mode: single
  icon: mdi:sprinkler-variant
speak:
  alias: Speak
  mode: single
  icon: mdi:account-voice
  fields:
    message:
      description: The message content
      example: The light is on!
      required: 'yes'
  sequence:
  - condition: state
    entity_id: input_boolean.quiet
    state: 'off'
  - condition: state
    entity_id: sensor.house_state
    state: home
  - service: tts.cloud_say
    data:
      entity_id: media_player.whole_home
      message: '{{message}}'
      language: nl-NL
fan_up:
  alias: Fan - up
  sequence:
  - choose:
    - conditions:
      - condition: state
        entity_id: fan.fan
        state: 'off'
      sequence:
      - service: fan.turn_on
        target:
          entity_id: fan.fan
        data:
          percentage: 50
    default:
    - service: fan.increase_speed
      target:
        entity_id: fan.fan
  mode: single
  icon: mdi:fan-chevron-up
fan_down:
  alias: Fan - down
  sequence:
  - service: fan.decrease_speed
    data: {}
    target:
      entity_id: fan.fan
  mode: single
  icon: mdi:fan-chevron-down
commit_and_clear:
  alias: Commit and clear
  sequence:
  - if:
    - condition: state
      entity_id: input_text.commit_message
      state: Your commit message
    then:
    - stop: ''
    else:
    - service: shell_command.git_commit
      data: {}
    - service: input_text.set_value
      data:
        value: Your commit message
      target:
        entity_id: input_text.commit_message
  mode: single
  icon: mdi:shape-rectangle-plus
'1655204175112':
  alias: Notify script
  mode: parallel
  max: 25
  icon: mdi:message
  fields:
    Title:
      description: The title of the notification.
      example: Cool title
      required: true
      selector:
        text:
    Message:
      description: The message content.
      example: The light is on!
      required: true
      selector:
        text:
    Url:
      description: The url that will open when clicked.
      example: lovelace/home
      required: true
      default: lovelace/home
      selector:
        text:
    Voice:
      description: Send voice notification.
      example: true
      required: true
      default: false
      selector:
        boolean:
    Admin_only:
      description: Only send to the administrator.
      example: true
      required: true
      default: false
      selector:
        boolean:
    Timing:
      description: Only send to people who are home.
      example: When no quiet time
      required: true
      default: When no quiet time
      selector:
        select:
          options:
          - Always
          - When no quiet time
          - Only when home and no quiet time
          - Retain till home and no quiet time
    Group:
      description: Combine notifications in a group visually.
      example: Utility
      required: true
      default: General
      selector:
        select:
          options:
          - General
          - Plants
          - Utility
          - Alarm
    Timeout:
      description: Time after which the message disappears. Zero is no timeout.
      example: 10
      required: true
      default: 0
      selector:
        number:
          min: 0
          max: 3600
          step: 1
          unit_of_measurement: minutes
          mode: box
  variables:
    color: "{% if Group == 'Plants' %}\n  {{'green'}}\n{% elif Group == 'Utility'
      %}\n  {{'grey'}}\n{% elif Group == 'Alarm' %}\n  {{'red'}}\n{% else %}\n  {{'deepskyblue'}}\n{%
      endif %}"
    timeout_seconds: "{% if Timeout|int(0) != 0 %}\n  {{Timeout * 60}}\n{% else %}\n
      \ {{ 0|int }}\n{% endif %}"
  sequence:
  - if:
    - condition: or
      conditions:
      - condition: template
        value_template: '{{ Timing == ''Always'' }}'
      - condition: and
        conditions:
        - condition: template
          value_template: '{{ Timing == ''Only when home and no quiet time'' }}'
        - condition: state
          entity_id: input_boolean.quiet
          state: 'off'
        - condition: state
          entity_id: person.tmp
          state: home
      - condition: and
        conditions:
        - condition: template
          value_template: '{{ Timing == ''Retain till home and no quiet time'' }}'
        - condition: state
          entity_id: input_boolean.quiet
          state: 'off'
        - condition: state
          entity_id: person.tmp
          state: home
      - condition: and
        conditions:
        - condition: template
          value_template: '{{ Timing == ''When no quiet time'' }}'
        - condition: state
          entity_id: input_boolean.quiet
          state: 'off'
    then:
    - service: notify.mobile_app_sm_g960f
      data:
        title: '{{ Title }}'
        message: '{{ Message }}'
        data:
          timeout: '{{ timeout_seconds }}'
          group: '{{ Group }}'
          channel: '{{ Group }}'
          color: '{{ color }}'
          clickAction: '{{ Url }}'
  - if:
    - condition: or
      conditions:
      - condition: and
        conditions:
        - condition: template
          value_template: '{{ Timing == ''Always'' }}'
        - condition: template
          value_template: '{{ Admin_only == false }}'
      - condition: and
        conditions:
        - condition: template
          value_template: '{{ Timing == ''Only when home and no quiet time'' }}'
        - condition: state
          entity_id: input_boolean.quiet
          state: 'off'
        - condition: template
          value_template: '{{ Admin_only == false }}'
        - condition: state
          entity_id: person.anneloes_jagt
          state: home
      - condition: and
        conditions:
        - condition: template
          value_template: '{{ Timing == ''Retain till home and no quiet time'' }}'
        - condition: state
          entity_id: input_boolean.quiet
          state: 'off'
        - condition: template
          value_template: '{{ Admin_only == false }}'
        - condition: state
          entity_id: person.anneloes_jagt
          state: home
      - condition: and
        conditions:
        - condition: template
          value_template: '{{ Timing == ''When no quiet time'' }}'
        - condition: state
          entity_id: input_boolean.quiet
          state: 'off'
        - condition: template
          value_template: '{{ Admin_only == false }}'
    then:
    - service: notify.mobile_app_sm_a202f
      data:
        title: '{{ Title }}'
        message: '{{ Message }}'
        data:
          timeout: '{{ timeout_seconds }}'
          group: '{{ Group }}'
          channel: '{{ Group }}'
          color: '{{ color }}'
          clickAction: '{{ Url }}'
  - if:
    - condition: and
      conditions:
      - condition: state
        entity_id: input_boolean.quiet
        state: 'off'
      - condition: template
        value_template: '{{ Voice == true }}'
      - condition: or
        conditions:
        - condition: state
          entity_id: person.tmp
          state: home
        - condition: and
          conditions:
          - condition: template
            value_template: '{{ Admin_only == false }}'
          - condition: state
            entity_id: person.anneloes_jagt
            state: home
    then:
    - service: media_player.volume_set
      data:
        volume_level: '{{states(''input_number.aux_volume'') | float}}'
      target:
        entity_id: media_player.whole_home
    - service: tts.cloud_say
      data:
        entity_id: media_player.whole_home
        message: '{{Message}}'
        language: nl-NL
  - if:
    - condition: and
      conditions:
      - condition: template
        value_template: '{{ Timing == ''Retain till home and no quiet time'' }}'
      - condition: template
        value_template: '{{ Admin_only == true }}'
      - condition: or
        conditions:
        - condition: state
          entity_id: input_boolean.quiet
          state: 'on'
        - condition: not
          conditions:
          - condition: state
            entity_id: person.tmp
            state: home
    then:
    - if:
      - condition: template
        value_template: '{{ Timeout|int(0) != 0}}'
      then:
      - wait_template: '{{is_state(''person.tmp'', ''home'') and is_state(''input_boolean.quiet'',
          ''off'')}}'
        continue_on_timeout: false
        timeout:
          minutes: '{{ Timeout }}'
      else:
      - wait_template: '{{is_state(''person.tmp'', ''home'') and is_state(''input_boolean.quiet'',
          ''off'')}}'
    - service: notify.mobile_app_sm_g960f
      data:
        title: '{{ Title }}'
        message: '{{ Message }}'
        data:
          timeout: '{{ timeout_seconds }}'
          group: '{{ Group }}'
          channel: '{{ Group }}'
          color: '{{ color }}'
          clickAction: '{{ Url }}'
  - if:
    - condition: and
      conditions:
      - condition: template
        value_template: '{{ Timing == ''Retain till home and no quiet time'' }}'
      - condition: template
        value_template: '{{ Admin_only == false }}'
      - condition: or
        conditions:
        - condition: state
          entity_id: input_boolean.quiet
          state: 'on'
        - condition: and
          conditions:
          - condition: not
            conditions:
            - condition: state
              entity_id: person.tmp
              state: home
          - condition: not
            conditions:
            - condition: state
              entity_id: person.anneloes_jagt
              state: home
    then:
    - if:
      - condition: template
        value_template: '{{ Timeout|int(0) != 0}}'
      then:
      - wait_template: '{{(is_state(''person.tmp'', ''home'') or is_state(''person.anneloes_jagt'',
          ''home'')) and is_state(''input_boolean.quiet'', ''off'')}}'
        continue_on_timeout: false
        timeout:
          minutes: '{{ Timeout }}'
      else:
      - wait_template: '{{(is_state(''person.tmp'', ''home'') or is_state(''person.anneloes_jagt'',
          ''home'')) and is_state(''input_boolean.quiet'', ''off'')}}'
    - if:
      - condition: state
        entity_id: person.anneloes_jagt
        state: home
      then:
      - service: notify.mobile_app_sm_a202f
        data:
          title: '{{ Title }}'
          message: '{{ Message }}'
          data:
            timeout: '{{ timeout_seconds }}'
            group: '{{ Group }}'
            channel: '{{ Group }}'
            color: '{{ color }}'
            clickAction: '{{ Url }}'
    - if:
      - condition: state
        entity_id: person.tmp
        state: home
      then:
      - service: notify.mobile_app_sm_g960f
        data:
          title: '{{ Title }}'
          message: '{{ Message }}'
          data:
            timeout: '{{ timeout_seconds }}'
            group: '{{ Group }}'
            channel: '{{ Group }}'
            color: '{{ color }}'
            clickAction: '{{ Url }}'
sprinklers_run_grass_for_input_time:
  alias: Sprinklers - Run lawn for input time
  sequence:
  - service: opensprinkler.run
    data:
      entity_id: binary_sensor.sprinkler_3_station_running
      run_seconds: '{{states("input_number.lawn_sprinkler_time") | int * 60}}'
  mode: single
  icon: mdi:sprinkler-variant
