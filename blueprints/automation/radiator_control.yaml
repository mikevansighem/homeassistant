blueprint:
  name: "Radiator control"
  description: "Turn on and off the heating based on the climate period and the house state. Prevent heating when a window remains open."
  domain: automation
  input:
    radiator:
      name: Radiator
      description: "Radiator control valve."
      selector:
        entity:
          domain: climate
          multiple: false
    window:
      name: Window
      description: "Window in the same room as the radiator."
      selector:
        entity:
          domain: binary_sensor
          multiple: false

trigger:

  - platform: state
    entity_id: sensor.heating_allowed
    to: 'true'
    id: 'ON'
  - platform: state
    entity_id: sensor.heating_allowed
    to: 'false'
    id: 'OFF'
  - platform: state
    entity_id: !input 'window'
    to: 'on'
    id: 'OFF'
    for:
      hours: 0
      minutes: 3
      seconds: 0
  - platform: state
    entity_id: !input 'window'
    to: 'off'
    id: 'ON'
    for:
      hours: 0
      minutes: 1
      seconds: 0

condition: []

action:
  - choose:
      - conditions:
          - condition: trigger
            id: 'ON'
          - condition: state
            entity_id: sensor.heating_allowed
            state: 'true'
          - condition: state
            entity_id: !input 'window'
            state: 'on'
            for:
              hours: 0
              minutes: 1
              seconds: 0
        sequence:
          - service: climate.set_hvac_mode
            data:
              hvac_mode: heat
            target:
              entity_id: !input 'radiator'
      - conditions:
          - condition: trigger
            id: 'OFF'
        sequence:
          - service: climate.set_hvac_mode
            data:
              hvac_mode: 'off'
            target:
              entity_id: !input 'radiator'
    default: []

mode: queued
max: 3